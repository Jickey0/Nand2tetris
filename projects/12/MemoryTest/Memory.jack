// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;

        let heap = 2048; // heapBase
        let freeList = heap;
        let heap[0] = 0; // next
        let heap[1] = 14334; // length
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int searchList;
        var int block;

        let searchList = freeList; // start the search at the start of open memory

        while (true) {
            // check if there is enough space in the segment
            if (ram[searchList + 1] > (size + 1)) {
                // reduce the size of the segment
                let ram[searchList + 1] = ram[searchList + 1] - size - 2;

                // block = avalMemory + current memory - size
                // NOTE: could be wrong
                let block = ram[searchList + 1] + searchList - size;
                let block[0] = 0;
                let block[1] = size;

                return block;
            }
            else {
                if (ram[searchList] = 0) {
                    return 0;
                }
                else {
                    let searchList = ram[searchList];
                }
            }
        }
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[0] = freeList;
        let freeList = o;
        return;
    }
}
