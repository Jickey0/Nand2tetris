// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/** A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array PowerOfTwo;

    // Initializes the Math library.
    function void init() {
        let PowerOfTwo = Array.new(16);
        let PowerOfTwo[0] = 1;
        let PowerOfTwo[1] = 2;
        let PowerOfTwo[2] = 4;
        let PowerOfTwo[3] = 8;
        let PowerOfTwo[4] = 16;
        let PowerOfTwo[5] = 32;
        let PowerOfTwo[6] = 64;
        let PowerOfTwo[7] = 128;
        let PowerOfTwo[8] = 256;
        let PowerOfTwo[9] = 512;
        let PowerOfTwo[10] = 1024;
        let PowerOfTwo[11] = 2048;
        let PowerOfTwo[12] = 4096;
        let PowerOfTwo[13] = 8192;
        let PowerOfTwo[14] = 16384;
        let PowerOfTwo[15] = 16384 + 16384;
        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        // sum = 0;
        var int sum;
        var int shiftedX;
        var int i;
        let i = 16;

        let sum = 0;

        // shiftedX = x
        let shiftedX = x;

        while (~(i = 0)) {
            // if ((iâ€™th bit of y) == 1)
            if (~(y[i] = 1)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX * 2;
            let i = i - 1;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;

        if ( (y > x) | (y < 0) ) {
            return 0;
        }
        let q = Math.divide(x, 2 * y);
        if ((x - (2 * q * y)) < y) {
            return 2 * q;
        }
        else {
            return 2 * q + 1;
        }
    }

    /** Returns the integer part of the square root of x.
    */

    
    function int sqrt(int x) {
        var int y;
        var int j;
        var int calc;

        let y = 0;
        // maybe j should be 4 ?
        let j = 8;

        while (~(j = 0)) {
            let calc = (y + PowerOfTwo[j]) * (y + PowerOfTwo[j]);
            if (((calc < x) | (calc = x)) & (calc > 0)) {
                let y = y + PowerOfTwo[j];
            }
        }
        return y;
    }

    /** Returns the greater value.
    */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller value.
    */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the absolute value of x
    */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }
}
