// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let str = Array.new(1);
        } else {
            let str = Array.new(maxLength);
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(str);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let length = length + 1;
        let str[length] = c;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[length] = 0;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean negative;
        var int index;

        var int currentInt;
        var int finalInt;

        // check if first char is '-'
        if ((length > 0) & (str[0] = 45)){
            let negative = true;
            let index = 1;
        } else {
            let negative = false;
            let index = 0;
        }

        let finalInt = 0;

        while (((str[index] > 47) & (str[index] < 58)) & (index < length)) {
            let finalInt = finalInt + (10 * (str[index] - 48));
            let index = index + 1;
        }

        if (negative) {
            let finalInt = -finalInt;
        }

        return finalInt;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var Array reverseInts;
        var int loopCount;
        var int finalInt;

        let reverseInts = Array.new(16);
        let loopCount = 0;

        // ex 241
        while (~(val = 0)) {
            let finalInt = (val - (10 * (val / 10)));
            let val = val / 10;
            
            let reverseInts[loopCount] = finalInt;
            let loopCount = loopCount + 1;
        }

        while (~(loopCount = 0)) {
            let str = appendChar(reverseInts[loopCount] + 48); // may have to re-set the string each time?
            let loopCount = loopCount - 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
