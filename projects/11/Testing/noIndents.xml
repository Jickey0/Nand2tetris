<class><keyword> class </keyword><identifier> Main </identifier><symbol> { </symbol><classVarDec><keyword> static </keyword><identifier> PongGame </identifier><identifier> instance </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><identifier> Bat </identifier><identifier> bat </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><identifier> Ball </identifier><identifier> ball </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><keyword> int </keyword><identifier> wall </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><keyword> boolean </keyword><identifier> exit </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><keyword> int </keyword><identifier> score </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><keyword> int </keyword><identifier> lastWall </identifier><symbol> ; </symbol></classVarDec><classVarDec><keyword> field </keyword><keyword> int </keyword><identifier> batWidth </identifier><symbol> ; </symbol></classVarDec><subroutineDec><keyword> method </keyword><keyword> void </keyword><identifier> moveBall </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><varDec><keyword> var </keyword><keyword> int </keyword><identifier> bouncingDirection </identifier><symbol> , </symbol><identifier> batLeft </identifier><symbol> , </symbol><identifier> batRight </identifier><symbol> , </symbol><identifier> ballLeft </identifier><symbol> , </symbol><identifier> ballRight </identifier><symbol> ; </symbol></varDec><statements><letStatement><keyword> let </keyword><identifier> wall </identifier><symbol> = </symbol><expression><term><identifier> ball </identifier><symbol> . </symbol><identifier> move </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><symbol> ( </symbol><expression><term><identifier> wall </identifier></term><symbol> &gt; </symbol><term><integerConstant> 0 </integerConstant></term></expression><symbol> ) </symbol></term><symbol> &amp; </symbol><term><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><symbol> ( </symbol><expression><term><identifier> wall </identifier></term><symbol> = </symbol><term><identifier> lastWall </identifier></term></expression><symbol> ) </symbol></term></term></expression><symbol> ) </symbol></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier> lastWall </identifier><symbol> = </symbol><expression><term><identifier> wall </identifier></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier> bouncingDirection </identifier><symbol> = </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier> batLeft </identifier><symbol> = </symbol><expression><term><identifier> bat </identifier><symbol> . </symbol><identifier> getLeft </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier> batRight </identifier><symbol> = </symbol><expression><term><identifier> bat </identifier><symbol> . </symbol><identifier> getRight </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier> ballLeft </identifier><symbol> = </symbol><expression><term><identifier> ball </identifier><symbol> . </symbol><identifier> getLeft </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> let </keyword><identifier> ballRight </identifier><symbol> = </symbol><expression><term><identifier> ball </identifier><symbol> . </symbol><identifier> getRight </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> wall </identifier></term><symbol> = </symbol><term><integerConstant> 4 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier> exit </identifier><symbol> = </symbol><expression><term><symbol> ( </symbol><expression><term><identifier> batLeft </identifier></term><symbol> &gt; </symbol><term><identifier> ballRight </identifier></term></expression><symbol> ) </symbol></term><symbol> | </symbol><term><symbol> ( </symbol><expression><term><identifier> batRight </identifier></term><symbol> &lt; </symbol><term><identifier> ballLeft </identifier></term></expression><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><identifier> exit </identifier></term></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> ballRight </identifier></term><symbol> &lt; </symbol><term><symbol> ( </symbol><expression><term><identifier> batLeft </identifier></term><symbol> + </symbol><term><integerConstant> 10 </integerConstant></term></expression><symbol> ) </symbol></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier> bouncingDirection </identifier><symbol> = </symbol><expression><term><symbol> - </symbol><term><integerConstant> 1 </integerConstant></term></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol><keyword> else </keyword><symbol> { </symbol><statements><ifStatement><keyword> if </keyword><symbol> ( </symbol><expression><term><identifier> ballLeft </identifier></term><symbol> &gt; </symbol><term><symbol> ( </symbol><expression><term><identifier> batRight </identifier></term><symbol> - </symbol><term><integerConstant> 10 </integerConstant></term></expression><symbol> ) </symbol></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> let </keyword><identifier> bouncingDirection </identifier><symbol> = </symbol><expression><term><integerConstant> 1 </integerConstant></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></ifStatement></statements><symbol> } </symbol></ifStatement><letStatement><keyword> let </keyword><identifier> batWidth </identifier><symbol> = </symbol><expression><term><identifier> batWidth </identifier></term><symbol> - </symbol><term><integerConstant> 2 </integerConstant></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> do </keyword><identifier> bat </identifier><symbol> . </symbol><identifier> setWidth </identifier><symbol> ( </symbol><expressionList><expression><term><identifier> batWidth </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> let </keyword><identifier> score </identifier><symbol> = </symbol><expression><term><identifier> score </identifier></term><symbol> + </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> do </keyword><identifier> Output </identifier><symbol> . </symbol><identifier> moveCursor </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 22 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 7 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> do </keyword><identifier> Output </identifier><symbol> . </symbol><identifier> printInt </identifier><symbol> ( </symbol><expressionList><expression><term><identifier> score </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></ifStatement></statements><symbol> } </symbol></ifStatement><doStatement><keyword> do </keyword><identifier> ball </identifier><symbol> . </symbol><identifier> bounce </identifier><symbol> ( </symbol><expressionList><expression><term><identifier> bouncingDirection </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></ifStatement><returnStatement><keyword> return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><symbol> } </symbol></class>